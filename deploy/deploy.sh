#!/bin/bash

# SBIS API FastAPI Deployment Script
# –ê–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–∫—Ä–∏–ø—Ç —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è

set -e  # –ü—Ä–µ—Ä–≤–∞—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ

# –¶–≤–µ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# –§—É–Ω–∫—Ü–∏–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
log_info() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

log_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

log_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

log_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}


# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
check_dependencies() {
    log_info "–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π..."

    local dependencies=("docker" "docker-compose" "curl" "git")
    local missing_deps=()

    for dep in "${dependencies[@]}"; do
        if ! command -v "$dep" &> /dev/null; then
            missing_deps+=("$dep")
        fi
    done

    if [[ ${#missing_deps[@]} -gt 0 ]]; then
        log_error "–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏: ${missing_deps[*]}"
        log_info "–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –∏—Ö –∫–æ–º–∞–Ω–¥–æ–π:"
        log_info "sudo apt update && sudo apt install -y ${missing_deps[*]}"
        exit 1
    fi

    log_success "–í—Å–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã"
}

# –°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏
create_backup() {
    local backup_name="backup_$(date +%Y%m%d_%H%M%S)"

    if [[ -d "logs" ]] || [[ -d "backups" ]]; then
        log_info "–°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏..."

        mkdir -p "backups"
        tar -czf "backups/${backup_name}.tar.gz" logs/ backups/ 2>/dev/null || true

        log_success "–†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è —Å–æ–∑–¥–∞–Ω–∞: backups/${backup_name}.tar.gz"
    fi
}

# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è Caddyfile –∏–∑ —à–∞–±–ª–æ–Ω–∞
generate_caddyfile() {
    log_info "–ì–µ–Ω–µ—Ä–∞—Ü–∏—è Caddyfile –∏–∑ —à–∞–±–ª–æ–Ω–∞..."

    if [[ -f "deploy/generate_caddyfile.py" ]]; then
        python3 deploy/generate_caddyfile.py
        log_success "Caddyfile —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω"
    else
        log_warning "–°–∫—Ä–∏–ø—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ Caddyfile –Ω–µ –Ω–∞–π–¥–µ–Ω"
    fi
}

# –ü–æ–ª—É—á–µ–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
update_code() {
    if [[ -d ".git" ]]; then
        log_info "–ü–æ–ª—É—á–µ–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –∏–∑ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è..."

        git fetch origin
        local local_commit=$(git rev-parse HEAD)
        local remote_commit=$(git rev-parse origin/main)

        if [[ "$local_commit" != "$remote_commit" ]]; then
            log_info "–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–¥–∞..."
            git pull origin main
            log_success "–ö–æ–¥ –æ–±–Ω–æ–≤–ª–µ–Ω"
            return 0
        else
            log_info "–£ –≤–∞—Å –ø–æ—Å–ª–µ–¥–Ω—è—è –≤–µ—Ä—Å–∏—è –∫–æ–¥–∞"
            return 1
        fi
    else
        log_warning "Git —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø—Ä–æ–ø—É—Å–∫ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è"
        return 1
    fi
}

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
setup_configuration() {
    log_info "–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏..."

    # –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ —à–∞–±–ª–æ–Ω–∞ .env –µ—Å–ª–∏ —Ñ–∞–π–ª –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    if [[ ! -f ".env" ]]; then
        if [[ -f ".env.example" ]]; then
            cp .env.example .env
            log_warning "–°–æ–∑–¥–∞–Ω .env —Ñ–∞–π–ª –∏–∑ —à–∞–±–ª–æ–Ω–∞"
            log_warning "–û—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä—É–π—Ç–µ .env —Ñ–∞–π–ª —Å –≤–∞—à–∏–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏!"
            read -p "–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ? (y/N): " -n 1 -r
            echo
            if [[ ! $REPLY =~ ^[Yy]$ ]]; then
                log_info "–†–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ. –û—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä—É–π—Ç–µ .env –∏ –∑–∞–ø—É—Å—Ç–∏—Ç–µ —Å–∫—Ä–∏–ø—Ç —Å–Ω–æ–≤–∞."
                exit 0
            fi
        else
            log_error ".env.example –Ω–µ –Ω–∞–π–¥–µ–Ω"
            exit 1
        fi
    fi

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
    local required_vars=(
        "SABY_APP_CLIENT_ID"
        "SABY_APP_SECRET"
        "SABY_SECRET_KEY"
    )

    local missing_vars=()
    for var in "${required_vars[@]}"; do
        if ! grep -q "^${var}=" .env; then
            missing_vars+=("$var")
        fi
    done

    if [[ ${#missing_vars[@]} -gt 0 ]]; then
        log_error "–í .env —Ñ–∞–π–ª–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ: ${missing_vars[*]}"
        exit 1
    fi

    log_success "–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞"
}

# –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤
stop_containers() {
    log_info "–û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤..."

    docker-compose down 2>/dev/null || true
    log_success "–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã"
}

# –°–±–æ—Ä–∫–∞ –æ–±—Ä–∞–∑–æ–≤
build_images() {
    log_info "–°–±–æ—Ä–∫–∞ Docker –æ–±—Ä–∞–∑–æ–≤..."

    if docker-compose build --no-cache; then
        log_success "–û–±—Ä–∞–∑—ã —Å–æ–±—Ä–∞–Ω—ã"
    else
        log_error "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±–æ—Ä–∫–µ –æ–±—Ä–∞–∑–æ–≤"
        exit 1
    fi
}

# –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–∏—Å–æ–≤
start_services() {
    log_info "–ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–∏—Å–æ–≤..."

    if docker-compose up -d; then
        log_success "–°–µ—Ä–≤–∏—Å—ã –∑–∞–ø—É—â–µ–Ω—ã"
    else
        log_error "–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ —Å–µ—Ä–≤–∏—Å–æ–≤"
        exit 1
    fi
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è
check_health() {
    log_info "–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–µ—Ä–≤–∏—Å–æ–≤..."

    local max_attempts=30
    local attempt=1

    while [[ $attempt -le $max_attempts ]]; do
        log_info "–ü–æ–ø—ã—Ç–∫–∞ $attempt/$max_attempts..."

        if curl -f -s "http://localhost/api/v1/health" > /dev/null 2>&1; then
            log_success "API —Å–µ—Ä–≤–∏—Å –∑–¥–æ—Ä–æ–≤"

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ Caddy
            if curl -f -s -k "https://localhost/api/v1/health" > /dev/null 2>&1; then
                log_success "Caddy —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ"
                return 0
            fi
        fi

        sleep 10
        ((attempt++))
    done

    log_error "–°–µ—Ä–≤–∏—Å—ã –Ω–µ –ø—Ä–æ—à–ª–∏ –ø—Ä–æ–≤–µ—Ä–∫—É –∑–¥–æ—Ä–æ–≤—å—è"
    return 1
}

# –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞
show_status() {
    log_info "–°—Ç–∞—Ç—É—Å —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è:"

    echo
    log_success "=== –°–¢–ê–¢–£–° –°–ï–†–í–ò–°–û–í ==="
    docker-compose ps

    echo
    log_success "=== –ò–ù–§–û–†–ú–ê–¶–ò–Ø –û –°–ï–†–í–ò–°–ï ==="
    echo "üåê API –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è: https://sabby.ru/docs"
    echo "üîç Health Check: https://sabby.ru/api/v1/health"
    echo "üìä –ú–µ—Ç—Ä–∏–∫–∏: http://localhost:9090 (–µ—Å–ª–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω Prometheus)"
    echo "üìà Grafana: http://localhost:3000 (–µ—Å–ª–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞)"

    echo
    log_success "=== –õ–û–ì–ò ==="
    echo "API: docker-compose logs -f api"
    echo "Caddy: docker-compose logs -f caddy"
    echo "Redis: docker-compose logs -f redis"

    echo
    log_success "=== –£–ü–†–ê–í–õ–ï–ù–ò–ï ==="
    echo "–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫: docker-compose restart"
    echo "–û—Å—Ç–∞–Ω–æ–≤–∫–∞: docker-compose down"
    echo "–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ: $0"
}

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
main() {
    echo
    log_success "üöÄ –ù–ê–ß–ê–õ–û –†–ê–ó–í–ï–†–¢–´–í–ê–ù–ò–Ø SBIS API FASTAPI"
    echo

    check_dependencies
    create_backup

    local code_updated=false
    if update_code; then
        code_updated=true
    fi

    generate_caddyfile
    setup_configuration

    if [[ "$code_updated" == true ]]; then
        stop_containers
        build_images
    fi

    start_services
    check_health
    show_status

    echo
    log_success "‚úÖ –†–ê–ó–í–ï–†–¢–´–í–ê–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û –£–°–ü–ï–®–ù–û!"
    echo
    log_info "API –¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ –∞–¥—Ä–µ—Å—É: https://sabby.ru"
    log_info "–î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è: https://sabby.ru/docs"
}

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
case "${1:-}" in
    "update")
        log_info "–†–µ–∂–∏–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è..."
        update_code && setup_configuration && build_images && start_services
        ;;
    "restart")
        log_info "–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —Å–µ—Ä–≤–∏—Å–æ–≤..."
        stop_containers && start_services && check_health
        ;;
    "status")
        show_status
        ;;
    "logs")
        docker-compose logs -f "${2:-api}"
        ;;
    "backup")
        create_backup
        ;;
    *)
        main
        ;;
esac