version: '3.8'

services:
  # Main API application
  api:
    build:
      context: .
      dockerfile: docker/Dockerfile
    container_name: sbis-api
    restart: unless-stopped
    environment:
      - ENVIRONMENT=production
      - DEBUG=false
    volumes:
      - ./logs:/app/logs
      - ./backups:/app/backups
    networks:
      - sbis-network
    depends_on:
      - redis
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/api/v1/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Caddy reverse proxy
  caddy:
    image: caddy:2-alpine
    container_name: sbis-caddy
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./Caddyfile:/etc/caddy/Caddyfile
    environment:
      - DOMAIN=${DOMAIN:-sabby.ru}
      - ./docker/caddy_data:/data
      - ./docker/caddy_config:/config
      - caddy_certificates:/certificates
    networks:
      - sbis-network
    depends_on:
      - api
    healthcheck:
      test: ["CMD", "caddy", "version"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis for caching and rate limiting
  redis:
    image: redis:7-alpine
    container_name: sbis-redis
    restart: unless-stopped
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-sabby_redis_password}
    volumes:
      - redis_data:/data
      - ./docker/redis.conf:/etc/redis/redis.conf
    networks:
      - sbis-network
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # PostgreSQL database (optional, for future features)
  # db:
  #   image: postgres:15-alpine
  #   container_name: sbis-db
  #   restart: unless-stopped
  #   environment:
  #     POSTGRES_DB: sbis_api
  #     POSTGRES_USER: sbis_user
  #     POSTGRES_PASSWORD: ${DB_PASSWORD}
  #   volumes:
  #     - db_data:/var/lib/postgresql/data
  #   networks:
  #     - sbis-network
  #   healthcheck:
  #     test: ["CMD-SHELL", "pg_isready -U sbis_user -d sbis_api"]
  #     interval: 30s
  #     timeout: 10s
  #     retries: 3

  # Prometheus for metrics collection
  prometheus:
    image: prom/prometheus:latest
    container_name: sbis-prometheus
    restart: unless-stopped
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    volumes:
      - ./docker/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    networks:
      - sbis-network
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:9090/-/healthy"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Grafana for visualization
  grafana:
    image: grafana/grafana:latest
    container_name: sbis-grafana
    restart: unless-stopped
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin}
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana_data:/var/lib/grafana
      - ./docker/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./docker/grafana/datasources:/etc/grafana/provisioning/datasources
    networks:
      - sbis-network
    depends_on:
      - prometheus
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Log aggregation (optional)
  # loki:
  #   image: grafana/loki:latest
  #   container_name: sbis-loki
  #   restart: unless-stopped
  #   command: -config.file=/etc/loki/local-config.yaml
  #   volumes:
  #     - ./docker/loki.yml:/etc/loki/local-config.yaml
  #     - loki_data:/loki
  #   networks:
  #     - sbis-network

  # Promtail for log shipping (optional)
  # promtail:
  #   image: grafana/promtail:latest
  #   container_name: sbis-promtail
  #   restart: unless-stopped
  #   command: -config.file=/etc/promtail/config.yml
  #   volumes:
  #     - ./logs:/var/log/sbis
  #     - ./docker/promtail.yml:/etc/promtail/config.yml
  #   networks:
  #     - sbis-network

networks:
  sbis-network:
    driver: bridge
    name: sbis-network

volumes:
  redis_data:
    name: sbis_redis_data
  prometheus_data:
    name: sbis_prometheus_data
  grafana_data:
    name: sbis_grafana_data
  caddy_certificates:
    name: sbis_caddy_certificates
  # db_data:
  #   name: sbis_db_data
  # loki_data:
  #   name: sbis_loki_data

# Environment variables
x-environment:
  &default-env
  SABY_APP_CLIENT_ID: ${SABY_APP_CLIENT_ID}
  SABY_APP_SECRET: ${SABY_APP_SECRET}
  SABY_SECRET_KEY: ${SABY_SECRET_KEY}
  REDIS_URL: redis://:sabby_redis_password@redis:6379
  ENVIRONMENT: production
  DEBUG: false
  LOG_LEVEL: INFO